
Opdracht 1.B.6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000001d6  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010e  0080010e  00000278  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aa0  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090e  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000034f  00000000  00000000  000016d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001a24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ab  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c5  00000000  00000000  00001f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ed       	ldi	r30, 0xD6	; 214
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 30       	cpi	r26, 0x0F	; 15
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	82 d0       	rcall	.+260    	; 0x1c8 <main>
  c4:	86 c0       	rjmp	.+268    	; 0x1d2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <handleEvent>:
outputs:	
notes:			Needs extensive testing. !! Please review execution 
                order !!
Version :    	DMK, Initial code
*******************************************************************/
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
	// Call EXIT function old state
	if( fsm[state][event].fexit != NULL) {
  cc:	c8 2f       	mov	r28, r24
  ce:	d0 e0       	ldi	r29, 0x00	; 0
  d0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
  d4:	9e 01       	movw	r18, r28
  d6:	28 0f       	add	r18, r24
  d8:	31 1d       	adc	r19, r1
  da:	f9 01       	movw	r30, r18
  dc:	ee 0f       	add	r30, r30
  de:	ff 1f       	adc	r31, r31
  e0:	ee 0f       	add	r30, r30
  e2:	ff 1f       	adc	r31, r31
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	e2 1b       	sub	r30, r18
  ea:	f3 0b       	sbc	r31, r19
  ec:	e0 50       	subi	r30, 0x00	; 0
  ee:	ff 4f       	sbci	r31, 0xFF	; 255
  f0:	04 80       	ldd	r0, Z+4	; 0x04
  f2:	f5 81       	ldd	r31, Z+5	; 0x05
  f4:	e0 2d       	mov	r30, r0
  f6:	30 97       	sbiw	r30, 0x00	; 0
  f8:	09 f0       	breq	.+2      	; 0xfc <handleEvent+0x34>
		fsm[state][event].fexit() ;
  fa:	09 95       	icall
	}
	
	// Set new state, -1 means 
	if(PINC & 0x01){
  fc:	98 9b       	sbis	0x13, 0	; 19
  fe:	13 c0       	rjmp	.+38     	; 0x126 <handleEvent+0x5e>
		state = fsm[state][event].nextState;
 100:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 104:	9e 01       	movw	r18, r28
 106:	28 0f       	add	r18, r24
 108:	31 1d       	adc	r19, r1
 10a:	f9 01       	movw	r30, r18
 10c:	ee 0f       	add	r30, r30
 10e:	ff 1f       	adc	r31, r31
 110:	ee 0f       	add	r30, r30
 112:	ff 1f       	adc	r31, r31
 114:	ee 0f       	add	r30, r30
 116:	ff 1f       	adc	r31, r31
 118:	e2 1b       	sub	r30, r18
 11a:	f3 0b       	sbc	r31, r19
 11c:	e0 50       	subi	r30, 0x00	; 0
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	86 81       	ldd	r24, Z+6	; 0x06
 122:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
	}

	// Call INIT function
	if( fsm[state][event].finit != NULL) {
 126:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 12a:	9e 01       	movw	r18, r28
 12c:	28 0f       	add	r18, r24
 12e:	31 1d       	adc	r19, r1
 130:	f9 01       	movw	r30, r18
 132:	ee 0f       	add	r30, r30
 134:	ff 1f       	adc	r31, r31
 136:	ee 0f       	add	r30, r30
 138:	ff 1f       	adc	r31, r31
 13a:	ee 0f       	add	r30, r30
 13c:	ff 1f       	adc	r31, r31
 13e:	e2 1b       	sub	r30, r18
 140:	f3 0b       	sbc	r31, r19
 142:	e0 50       	subi	r30, 0x00	; 0
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	01 90       	ld	r0, Z+
 148:	f0 81       	ld	r31, Z
 14a:	e0 2d       	mov	r30, r0
 14c:	30 97       	sbiw	r30, 0x00	; 0
 14e:	09 f0       	breq	.+2      	; 0x152 <handleEvent+0x8a>
		fsm[state][event].finit() ;
 150:	09 95       	icall
	}

	// Call BODY function
	if( fsm[state][event].fbody != NULL) {
 152:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 156:	c8 0f       	add	r28, r24
 158:	d1 1d       	adc	r29, r1
 15a:	fe 01       	movw	r30, r28
 15c:	ee 0f       	add	r30, r30
 15e:	ff 1f       	adc	r31, r31
 160:	ee 0f       	add	r30, r30
 162:	ff 1f       	adc	r31, r31
 164:	ee 0f       	add	r30, r30
 166:	ff 1f       	adc	r31, r31
 168:	ec 1b       	sub	r30, r28
 16a:	fd 0b       	sbc	r31, r29
 16c:	e0 50       	subi	r30, 0x00	; 0
 16e:	ff 4f       	sbci	r31, 0xFF	; 255
 170:	02 80       	ldd	r0, Z+2	; 0x02
 172:	f3 81       	ldd	r31, Z+3	; 0x03
 174:	e0 2d       	mov	r30, r0
 176:	30 97       	sbiw	r30, 0x00	; 0
 178:	09 f0       	breq	.+2      	; 0x17c <handleEvent+0xb4>
		fsm[state][event].fbody() ;
 17a:	09 95       	icall
	}
}
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	08 c0       	rjmp	.+16     	; 0x198 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	ef ec       	ldi	r30, 0xCF	; 207
 18a:	f7 e0       	ldi	r31, 0x07	; 7
 18c:	31 97       	sbiw	r30, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <wait+0xa>
 190:	00 c0       	rjmp	.+0      	; 0x192 <wait+0x10>
 192:	00 00       	nop
 194:	2f 5f       	subi	r18, 0xFF	; 255
 196:	3f 4f       	sbci	r19, 0xFF	; 255
 198:	28 17       	cp	r18, r24
 19a:	39 07       	cpc	r19, r25
 19c:	ac f3       	brlt	.-22     	; 0x188 <wait+0x6>
	{
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 19e:	08 95       	ret

000001a0 <hz1>:
		fsm[state][event].fbody() ;
	}
}

void hz1(void){
	PORTD = 0b10000000;
 1a0:	80 e8       	ldi	r24, 0x80	; 128
 1a2:	82 bb       	out	0x12, r24	; 18
	wait(1000);
 1a4:	88 ee       	ldi	r24, 0xE8	; 232
 1a6:	93 e0       	ldi	r25, 0x03	; 3
 1a8:	ec df       	rcall	.-40     	; 0x182 <wait>
	PORTD = 0b00000000;
 1aa:	12 ba       	out	0x12, r1	; 18
	wait(1000);
 1ac:	88 ee       	ldi	r24, 0xE8	; 232
 1ae:	93 e0       	ldi	r25, 0x03	; 3
 1b0:	e8 cf       	rjmp	.-48     	; 0x182 <wait>
 1b2:	08 95       	ret

000001b4 <hz4>:
}

void hz4(void){
	PORTD = 0b10000000;
 1b4:	80 e8       	ldi	r24, 0x80	; 128
 1b6:	82 bb       	out	0x12, r24	; 18
	wait(250);
 1b8:	8a ef       	ldi	r24, 0xFA	; 250
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	e2 df       	rcall	.-60     	; 0x182 <wait>
	PORTD = 0b00000000;
 1be:	12 ba       	out	0x12, r1	; 18
	wait(250);
 1c0:	8a ef       	ldi	r24, 0xFA	; 250
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	de cf       	rjmp	.-68     	; 0x182 <wait>
 1c6:	08 95       	ret

000001c8 <main>:
notes:			Looping forever, flipping bits on PORTD
Version :    	DMK, Initial code
*******************************************************************/
{
	
	DDRD = 0b10000000;			// All pins PORTD are set to output 
 1c8:	80 e8       	ldi	r24, 0x80	; 128
 1ca:	81 bb       	out	0x11, r24	; 17
	
	while (1)
	{
		handleEvent(C0);
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	7c df       	rcall	.-264    	; 0xc8 <handleEvent>
 1d0:	fd cf       	rjmp	.-6      	; 0x1cc <main+0x4>

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
