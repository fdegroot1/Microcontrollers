
3.B.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000240  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000240  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010c  0080010c  000002e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d24  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a10  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005fc  00000000  00000000  00001b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  0000210c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051b  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000033d  00000000  00000000  0000275b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002a98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	d5 c0       	rjmp	.+426    	; 0x1d4 <__vector_10>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e4       	ldi	r30, 0x40	; 64
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 31       	cpi	r26, 0x10	; 16
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b3 d0       	rcall	.+358    	; 0x22a <main>
  c4:	bb c0       	rjmp	.+374    	; 0x23c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <lcd_strobe_lcd_e>:
outputs:
notes:			According datasheet HD44780
Version :    	DMK, Initial code
*******************************************************************/
void lcd_strobe_lcd_e(void) {
	PORTA |= (1<<LCD_E);	// E high
  c8:	8b b3       	in	r24, 0x1b	; 27
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8f ec       	ldi	r24, 0xCF	; 207
  d0:	97 e0       	ldi	r25, 0x07	; 7
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <lcd_strobe_lcd_e+0xa>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <lcd_strobe_lcd_e+0x10>
  d8:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTA &= ~(1<<LCD_E);  	// E low
  da:	8b b3       	in	r24, 0x1b	; 27
  dc:	8f 7b       	andi	r24, 0xBF	; 191
  de:	8b bb       	out	0x1b, r24	; 27
  e0:	8f ec       	ldi	r24, 0xCF	; 207
  e2:	97 e0       	ldi	r25, 0x07	; 7
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <lcd_strobe_lcd_e+0x1c>
  e8:	00 c0       	rjmp	.+0      	; 0xea <lcd_strobe_lcd_e+0x22>
  ea:	00 00       	nop
  ec:	08 95       	ret

000000ee <init_4bits_mode>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void init_4bits_mode(void) {
  ee:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRD = 0xFF;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;
  f4:	8a bb       	out	0x1a, r24	; 26
	PORTC = 0x00;
  f6:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
  f8:	1b ba       	out	0x1b, r1	; 27
	//PORTA = 0xFF;

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
  fa:	c0 e2       	ldi	r28, 0x20	; 32
  fc:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
  fe:	e4 df       	rcall	.-56     	; 0xc8 <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
	lcd_strobe_lcd_e();
 100:	c5 bb       	out	0x15, r28	; 21
 102:	e2 df       	rcall	.-60     	; 0xc8 <lcd_strobe_lcd_e>
	PORTC = 0x80;
 104:	80 e8       	ldi	r24, 0x80	; 128
	lcd_strobe_lcd_e();
 106:	85 bb       	out	0x15, r24	; 21

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 108:	df df       	rcall	.-66     	; 0xc8 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 10a:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;
 10c:	dd df       	rcall	.-70     	; 0xc8 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 10e:	80 ef       	ldi	r24, 0xF0	; 240

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 110:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 112:	da df       	rcall	.-76     	; 0xc8 <lcd_strobe_lcd_e>
 114:	15 ba       	out	0x15, r1	; 21
	PORTC = 0x60;
 116:	d8 df       	rcall	.-80     	; 0xc8 <lcd_strobe_lcd_e>
 118:	80 e6       	ldi	r24, 0x60	; 96
	lcd_strobe_lcd_e();
 11a:	85 bb       	out	0x15, r24	; 21
 11c:	d5 df       	rcall	.-86     	; 0xc8 <lcd_strobe_lcd_e>
}
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <lcd_write_data>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_data(unsigned char byte) {
 122:	cf 93       	push	r28
 124:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 126:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1<<LCD_RS);
 128:	8b b3       	in	r24, 0x1b	; 27
 12a:	80 61       	ori	r24, 0x10	; 16
 12c:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 12e:	cc df       	rcall	.-104    	; 0xc8 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 130:	c2 95       	swap	r28
 132:	c0 7f       	andi	r28, 0xF0	; 240
 134:	c5 bb       	out	0x15, r28	; 21
	PORTA |= (1<<LCD_RS);
 136:	8b b3       	in	r24, 0x1b	; 27
 138:	80 61       	ori	r24, 0x10	; 16
	lcd_strobe_lcd_e();
 13a:	8b bb       	out	0x1b, r24	; 27
 13c:	c5 df       	rcall	.-118    	; 0xc8 <lcd_strobe_lcd_e>
}
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <lcd_write_string>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_string(char *str) {
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ec 01       	movw	r28, r24
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 148:	02 c0       	rjmp	.+4      	; 0x14e <lcd_write_string+0xc>
		lcd_write_data(*str);
 14a:	eb df       	rcall	.-42     	; 0x122 <lcd_write_data>
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 14c:	21 96       	adiw	r28, 0x01	; 1
 14e:	88 81       	ld	r24, Y
 150:	81 11       	cpse	r24, r1
 152:	fb cf       	rjmp	.-10     	; 0x14a <lcd_write_string+0x8>
		lcd_write_data(*str);
	}
}
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <lcd_write_command>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_command(unsigned char byte) {
 15a:	cf 93       	push	r28
 15c:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 15e:	85 bb       	out	0x15, r24	; 21
	PORTA &= ~(1<<LCD_RS);
 160:	8b b3       	in	r24, 0x1b	; 27
 162:	8f 7e       	andi	r24, 0xEF	; 239
 164:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 166:	b0 df       	rcall	.-160    	; 0xc8 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 168:	c2 95       	swap	r28
 16a:	c0 7f       	andi	r28, 0xF0	; 240
 16c:	c5 bb       	out	0x15, r28	; 21
	PORTA &= ~(1<<LCD_RS);
 16e:	8b b3       	in	r24, 0x1b	; 27
 170:	8f 7e       	andi	r24, 0xEF	; 239
	lcd_strobe_lcd_e();
 172:	8b bb       	out	0x1b, r24	; 27
 174:	a9 df       	rcall	.-174    	; 0xc8 <lcd_strobe_lcd_e>
}
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <lcd_clear>:


void lcd_clear() {
	lcd_write_command (0x01);						//Leeg display
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	ee df       	rcall	.-36     	; 0x15a <lcd_write_command>
 17e:	8f e9       	ldi	r24, 0x9F	; 159
 180:	9f e0       	ldi	r25, 0x0F	; 15
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_clear+0x8>
 186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_clear+0xe>
 188:	00 00       	nop
	_delay_ms(2);
	lcd_write_command (0x80);						//Cursor terug naar start
 18a:	80 e8       	ldi	r24, 0x80	; 128
 18c:	e6 cf       	rjmp	.-52     	; 0x15a <lcd_write_command>
 18e:	08 95       	ret

00000190 <set_cursor>:
}

void set_cursor(int position){
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	8c 01       	movw	r16, r24
	for(int i=0; i<position; i++){
 19a:	c0 e0       	ldi	r28, 0x00	; 0
 19c:	d0 e0       	ldi	r29, 0x00	; 0
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <set_cursor+0x16>
		lcd_write_command(0x14);
 1a0:	84 e1       	ldi	r24, 0x14	; 20
 1a2:	db df       	rcall	.-74     	; 0x15a <lcd_write_command>
	_delay_ms(2);
	lcd_write_command (0x80);						//Cursor terug naar start
}

void set_cursor(int position){
	for(int i=0; i<position; i++){
 1a4:	21 96       	adiw	r28, 0x01	; 1
 1a6:	c0 17       	cp	r28, r16
 1a8:	d1 07       	cpc	r29, r17
 1aa:	d4 f3       	brlt	.-12     	; 0x1a0 <set_cursor+0x10>
		lcd_write_command(0x14);
	}
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	08 95       	ret

000001b6 <wait>:
// Initialize timer2
void timer2Init( void ) {
	TCNT2 = TimerPreset;	// Preset value of counter 2
	TIMSK |= BIT(6);		// T2 overflow interrupt enable
	sei();				// turn_on intr all
	TCCR2 = 0x07;		// Initialize T2: ext.counting, rising edge, run
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	08 c0       	rjmp	.+16     	; 0x1cc <wait+0x16>
 1bc:	ef ec       	ldi	r30, 0xCF	; 207
 1be:	f7 e0       	ldi	r31, 0x07	; 7
 1c0:	31 97       	sbiw	r30, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <wait+0xa>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <wait+0x10>
 1c6:	00 00       	nop
 1c8:	2f 5f       	subi	r18, 0xFF	; 255
 1ca:	3f 4f       	sbci	r19, 0xFF	; 255
 1cc:	28 17       	cp	r18, r24
 1ce:	39 07       	cpc	r19, r25
 1d0:	ac f3       	brlt	.-22     	; 0x1bc <wait+0x6>
 1d2:	08 95       	ret

000001d4 <__vector_10>:
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ea:	84 bd       	out	0x24, r24	; 36
 1ec:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <tenthValue>
 1f0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <tenthValue+0x1>
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <tenthValue+0x1>
 1fa:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tenthValue>
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 206:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 20a:	9f 91       	pop	r25
 20c:	8f 91       	pop	r24
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <lcdInit>:
}

void lcdInit(){
	init_4bits_mode();
 218:	6a df       	rcall	.-300    	; 0xee <init_4bits_mode>
	wait(10);
 21a:	8a e0       	ldi	r24, 0x0A	; 10
 21c:	90 e0       	ldi	r25, 0x00	; 0
	lcd_clear();
 21e:	cb df       	rcall	.-106    	; 0x1b6 <wait>
	set_cursor(1);
 220:	ac df       	rcall	.-168    	; 0x17a <lcd_clear>
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	b4 cf       	rjmp	.-152    	; 0x190 <set_cursor>
 228:	08 95       	ret

0000022a <main>:
}

int main(void) {
	lcdInit();
 22a:	f6 df       	rcall	.-20     	; 0x218 <lcdInit>
	lcd_clear();
 22c:	a6 df       	rcall	.-180    	; 0x17a <lcd_clear>
 22e:	82 e0       	ldi	r24, 0x02	; 2
	lcd_write_string("helloooo");
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	87 df       	rcall	.-242    	; 0x142 <lcd_write_string>
 234:	8a e0       	ldi	r24, 0x0A	; 10
			//sprintf(number, "%d", tenthValue);
			//lcd_write_string(&number[0]);
			//boolean = 0;
		//}
	
		wait(10);
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	be df       	rcall	.-132    	; 0x1b6 <wait>
 23a:	fc cf       	rjmp	.-8      	; 0x234 <main+0xa>

0000023c <_exit>:
 23c:	f8 94       	cli

0000023e <__stop_program>:
 23e:	ff cf       	rjmp	.-2      	; 0x23e <__stop_program>
