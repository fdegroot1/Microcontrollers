
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000324  00000398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000324  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e87  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a82  00000000  00000000  00001327  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000692  00000000  00000000  00001da9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  0000243c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a3  00000000  00000000  000025a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000496  00000000  00000000  00002b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002fe1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	e6 c0       	rjmp	.+460    	; 0x1d2 <__vector_1>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e2       	ldi	r30, 0x24	; 36
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	e1 d0       	rcall	.+450    	; 0x276 <main>
  b4:	35 c1       	rjmp	.+618    	; 0x320 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <lcd_strobe_lcd_e>:
outputs:
notes:			According datasheet HD44780
Version :    	DMK, Initial code
*******************************************************************/
void lcd_strobe_lcd_e(void) {
	PORTA |= (1<<LCD_E);	// E high
  b8:	8b b3       	in	r24, 0x1b	; 27
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	8f ec       	ldi	r24, 0xCF	; 207
  c0:	97 e0       	ldi	r25, 0x07	; 7
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_strobe_lcd_e+0xa>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_strobe_lcd_e+0x10>
  c8:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTA &= ~(1<<LCD_E);  	// E low
  ca:	8b b3       	in	r24, 0x1b	; 27
  cc:	8f 7b       	andi	r24, 0xBF	; 191
  ce:	8b bb       	out	0x1b, r24	; 27
  d0:	8f ec       	ldi	r24, 0xCF	; 207
  d2:	97 e0       	ldi	r25, 0x07	; 7
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcd_strobe_lcd_e+0x1c>
  d8:	00 c0       	rjmp	.+0      	; 0xda <lcd_strobe_lcd_e+0x22>
  da:	00 00       	nop
  dc:	08 95       	ret

000000de <init_4bits_mode>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void init_4bits_mode(void) {
  de:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	84 bb       	out	0x14, r24	; 20
	DDRA = 0xFF;
  e4:	8a bb       	out	0x1a, r24	; 26
	PORTC = 0x00;
  e6:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
  e8:	1b ba       	out	0x1b, r1	; 27
	//PORTA = 0xFF;

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
  ea:	c0 e2       	ldi	r28, 0x20	; 32
  ec:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
  ee:	e4 df       	rcall	.-56     	; 0xb8 <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
	lcd_strobe_lcd_e();
  f0:	c5 bb       	out	0x15, r28	; 21
  f2:	e2 df       	rcall	.-60     	; 0xb8 <lcd_strobe_lcd_e>
	PORTC = 0x80;
  f4:	80 e8       	ldi	r24, 0x80	; 128
	lcd_strobe_lcd_e();
  f6:	85 bb       	out	0x15, r24	; 21

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
  f8:	df df       	rcall	.-66     	; 0xb8 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
  fa:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;
  fc:	dd df       	rcall	.-70     	; 0xb8 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
  fe:	80 ef       	ldi	r24, 0xF0	; 240

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 100:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 102:	da df       	rcall	.-76     	; 0xb8 <lcd_strobe_lcd_e>
 104:	15 ba       	out	0x15, r1	; 21
	PORTC = 0x60;
 106:	d8 df       	rcall	.-80     	; 0xb8 <lcd_strobe_lcd_e>
 108:	80 e6       	ldi	r24, 0x60	; 96
	lcd_strobe_lcd_e();
 10a:	85 bb       	out	0x15, r24	; 21
 10c:	d5 df       	rcall	.-86     	; 0xb8 <lcd_strobe_lcd_e>
}
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <lcd_write_data>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_data(unsigned char byte) {
 112:	cf 93       	push	r28
 114:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 116:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1<<LCD_RS);
 118:	8b b3       	in	r24, 0x1b	; 27
 11a:	80 61       	ori	r24, 0x10	; 16
 11c:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 11e:	cc df       	rcall	.-104    	; 0xb8 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 120:	c2 95       	swap	r28
 122:	c0 7f       	andi	r28, 0xF0	; 240
 124:	c5 bb       	out	0x15, r28	; 21
	PORTA |= (1<<LCD_RS);
 126:	8b b3       	in	r24, 0x1b	; 27
 128:	80 61       	ori	r24, 0x10	; 16
	lcd_strobe_lcd_e();
 12a:	8b bb       	out	0x1b, r24	; 27
 12c:	c5 df       	rcall	.-118    	; 0xb8 <lcd_strobe_lcd_e>
}
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <lcd_write_string>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_string(char *str) {
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	ec 01       	movw	r28, r24
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 138:	02 c0       	rjmp	.+4      	; 0x13e <lcd_write_string+0xc>
		lcd_write_data(*str);
 13a:	eb df       	rcall	.-42     	; 0x112 <lcd_write_data>
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 13c:	21 96       	adiw	r28, 0x01	; 1
 13e:	88 81       	ld	r24, Y
 140:	81 11       	cpse	r24, r1
 142:	fb cf       	rjmp	.-10     	; 0x13a <lcd_write_string+0x8>
		lcd_write_data(*str);
	}
}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <lcd_write_command>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_command(unsigned char byte) {
 14a:	cf 93       	push	r28
 14c:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 14e:	85 bb       	out	0x15, r24	; 21
	PORTA &= ~(1<<LCD_RS);
 150:	8b b3       	in	r24, 0x1b	; 27
 152:	8f 7e       	andi	r24, 0xEF	; 239
 154:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 156:	b0 df       	rcall	.-160    	; 0xb8 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 158:	c2 95       	swap	r28
 15a:	c0 7f       	andi	r28, 0xF0	; 240
 15c:	c5 bb       	out	0x15, r28	; 21
	PORTA &= ~(1<<LCD_RS);
 15e:	8b b3       	in	r24, 0x1b	; 27
 160:	8f 7e       	andi	r24, 0xEF	; 239
	lcd_strobe_lcd_e();
 162:	8b bb       	out	0x1b, r24	; 27
 164:	a9 df       	rcall	.-174    	; 0xb8 <lcd_strobe_lcd_e>
}
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <lcd_clear>:


void lcd_clear() {
	lcd_write_command (0x01);						//Leeg display
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	ee df       	rcall	.-36     	; 0x14a <lcd_write_command>
 16e:	8f e9       	ldi	r24, 0x9F	; 159
 170:	9f e0       	ldi	r25, 0x0F	; 15
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_clear+0x8>
 176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_clear+0xe>
 178:	00 00       	nop
	_delay_ms(2);
	lcd_write_command (0x80);						//Cursor terug naar start
 17a:	80 e8       	ldi	r24, 0x80	; 128
 17c:	e6 cf       	rjmp	.-52     	; 0x14a <lcd_write_command>
 17e:	08 95       	ret

00000180 <wait_us>:

uint16_t timer_dist = 125; // time measured by timer;

void wait_us(unsigned int us)
{
	for(int i = 0; i < us; i++)
 180:	20 e0       	ldi	r18, 0x00	; 0
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	06 c0       	rjmp	.+12     	; 0x192 <wait_us+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	46 e0       	ldi	r20, 0x06	; 6
 188:	4a 95       	dec	r20
 18a:	f1 f7       	brne	.-4      	; 0x188 <wait_us+0x8>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <wait_us+0xe>
 18e:	2f 5f       	subi	r18, 0xFF	; 255
 190:	3f 4f       	sbci	r19, 0xFF	; 255
 192:	28 17       	cp	r18, r24
 194:	39 07       	cpc	r19, r25
 196:	b8 f3       	brcs	.-18     	; 0x186 <wait_us+0x6>
	{
		_delay_us(1);
	}
}
 198:	08 95       	ret

0000019a <wait_ms>:

void wait_ms(unsigned int ms)
{
	
	for(int i = 0; i < ms; i++)
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	08 c0       	rjmp	.+16     	; 0x1b0 <wait_ms+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a0:	e7 e8       	ldi	r30, 0x87	; 135
 1a2:	f3 e1       	ldi	r31, 0x13	; 19
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <wait_ms+0xa>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <wait_ms+0x10>
 1aa:	00 00       	nop
 1ac:	2f 5f       	subi	r18, 0xFF	; 255
 1ae:	3f 4f       	sbci	r19, 0xFF	; 255
 1b0:	28 17       	cp	r18, r24
 1b2:	39 07       	cpc	r19, r25
 1b4:	a8 f3       	brcs	.-22     	; 0x1a0 <wait_ms+0x6>
	{
		_delay_ms(1);
	}
}
 1b6:	08 95       	ret

000001b8 <ultrasonic_send_pulse>:

void ultrasonic_send_pulse()
{
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
	PORTG = 0x00; // 10 us low pulse
 1bc:	c5 e6       	ldi	r28, 0x65	; 101
 1be:	d0 e0       	ldi	r29, 0x00	; 0
 1c0:	18 82       	st	Y, r1
	wait_us(10);
 1c2:	8a e0       	ldi	r24, 0x0A	; 10
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	dc df       	rcall	.-72     	; 0x180 <wait_us>
	PORTG = 0x01;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	88 83       	st	Y, r24
}
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <__vector_1>:

ISR(INT0_vect)
{
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	8f 93       	push	r24
 1de:	9f 93       	push	r25
	
	// if the interrupt was generated on a rising edge (start sending echo)
	if (int_stat == INTERRUPT_RISING)
 1e0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <int_stat>
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	41 f4       	brne	.+16     	; 0x1f8 <__vector_1+0x26>
	{
		// set interrupt pin 0 on PORTD to falling edge
		EICRA = 0x02;
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
		
		// reset the time in timer1
		TCNT1 = 0x00;
 1ee:	1d bc       	out	0x2d, r1	; 45
 1f0:	1c bc       	out	0x2c, r1	; 44
		
		// set interrupt status
		int_stat = INTERRUPT_FALLING;
 1f2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <int_stat>
 1f6:	0c c0       	rjmp	.+24     	; 0x210 <__vector_1+0x3e>
	} else 
	// else if it was generated on a falling edge (end sending echo)
	{
		// set interrupt pin 0 on PORTD to rising edge
		EICRA = 0x03;
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
		
		// read timer1 into time_dist
		timer_dist = TCNT1;
 1fe:	8c b5       	in	r24, 0x2c	; 44
 200:	9d b5       	in	r25, 0x2d	; 45
 202:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 206:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		// set interrupt status
		int_stat = INTERRUPT_RISING;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <int_stat>
	}
	
}
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <ultrasonic_measurement>:

void ultrasonic_measurement(){
 21e:	0f 93       	push	r16
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	00 d0       	rcall	.+0      	; 0x228 <ultrasonic_measurement+0xa>
 228:	00 d0       	rcall	.+0      	; 0x22a <ultrasonic_measurement+0xc>
 22a:	1f 92       	push	r1
 22c:	cd b7       	in	r28, 0x3d	; 61
 22e:	de b7       	in	r29, 0x3e	; 62
	char snum[5];
	
	ultrasonic_send_pulse();
 230:	c3 df       	rcall	.-122    	; 0x1b8 <ultrasonic_send_pulse>
	int distance = timer_dist * (340 / 2);
 232:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 236:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 23a:	2a ea       	ldi	r18, 0xAA	; 170
 23c:	28 9f       	mul	r18, r24
 23e:	80 01       	movw	r16, r0
 240:	29 9f       	mul	r18, r25
 242:	10 0d       	add	r17, r0
	lcd_clear();
 244:	11 24       	eor	r1, r1
 246:	91 df       	rcall	.-222    	; 0x16a <lcd_clear>
	itoa(distance, snum, 10);;
 248:	4a e0       	ldi	r20, 0x0A	; 10
 24a:	50 e0       	ldi	r21, 0x00	; 0
 24c:	be 01       	movw	r22, r28
 24e:	6f 5f       	subi	r22, 0xFF	; 255
 250:	7f 4f       	sbci	r23, 0xFF	; 255
 252:	c8 01       	movw	r24, r16
 254:	28 d0       	rcall	.+80     	; 0x2a6 <itoa>
	lcd_write_string(snum);
 256:	ce 01       	movw	r24, r28
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	6b df       	rcall	.-298    	; 0x132 <lcd_write_string>
	
	wait_ms(200);
 25c:	88 ec       	ldi	r24, 0xC8	; 200
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	9c df       	rcall	.-200    	; 0x19a <wait_ms>
 262:	0f 90       	pop	r0
}
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	0f 90       	pop	r0
 26a:	0f 90       	pop	r0
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	08 95       	ret

00000276 <main>:
 276:	8f ef       	ldi	r24, 0xFF	; 255

int main(void)
{
	DDRG = 0xFF; // port g all output. pin 0 is trig, the rest is for debug
 278:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	DDRD = 0x00; // port D pin 0 on input. 0 is echo and also interrupt
 27c:	11 ba       	out	0x11, r1	; 17
	
	EICRA = 0x03; // interrupt PORTD on pin 0, rising edge
 27e:	83 e0       	ldi	r24, 0x03	; 3
 280:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	
	EIMSK |= 0x01; // enable interrupt on pin 0 (INT0)
 284:	89 b7       	in	r24, 0x39	; 57
 286:	81 60       	ori	r24, 0x01	; 1
 288:	89 bf       	out	0x39, r24	; 57
	
	TCCR1A = 0b00000000; // initialize timer1, prescaler=256
 28a:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00001100; // CTC compare A, RUN
 28c:	8c e0       	ldi	r24, 0x0C	; 12
 28e:	8e bd       	out	0x2e, r24	; 46
	
	sei(); // turn on interrupt system
 290:	78 94       	sei
	
	init_4bits_mode();
 292:	25 df       	rcall	.-438    	; 0xde <init_4bits_mode>
 294:	8f e4       	ldi	r24, 0x4F	; 79
 296:	93 ec       	ldi	r25, 0xC3	; 195
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <main+0x22>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <main+0x28>
	
	_delay_ms(10);
	
	lcd_clear();
 29e:	00 00       	nop


    while (1) 
    {
		ultrasonic_measurement();
 2a0:	64 df       	rcall	.-312    	; 0x16a <lcd_clear>
 2a2:	bd df       	rcall	.-134    	; 0x21e <ultrasonic_measurement>
 2a4:	fe cf       	rjmp	.-4      	; 0x2a2 <main+0x2c>

000002a6 <itoa>:
 2a6:	45 32       	cpi	r20, 0x25	; 37
 2a8:	51 05       	cpc	r21, r1
 2aa:	18 f4       	brcc	.+6      	; 0x2b2 <itoa+0xc>
 2ac:	42 30       	cpi	r20, 0x02	; 2
 2ae:	08 f0       	brcs	.+2      	; 0x2b2 <itoa+0xc>
 2b0:	04 c0       	rjmp	.+8      	; 0x2ba <__itoa_ncheck>
 2b2:	fb 01       	movw	r30, r22
 2b4:	10 82       	st	Z, r1
 2b6:	cb 01       	movw	r24, r22
 2b8:	08 95       	ret

000002ba <__itoa_ncheck>:
 2ba:	bb 27       	eor	r27, r27
 2bc:	4a 30       	cpi	r20, 0x0A	; 10
 2be:	31 f4       	brne	.+12     	; 0x2cc <__itoa_ncheck+0x12>
 2c0:	99 23       	and	r25, r25
 2c2:	22 f4       	brpl	.+8      	; 0x2cc <__itoa_ncheck+0x12>
 2c4:	bd e2       	ldi	r27, 0x2D	; 45
 2c6:	90 95       	com	r25
 2c8:	81 95       	neg	r24
 2ca:	9f 4f       	sbci	r25, 0xFF	; 255
 2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <__utoa_common>

000002ce <__utoa_ncheck>:
 2ce:	bb 27       	eor	r27, r27

000002d0 <__utoa_common>:
 2d0:	fb 01       	movw	r30, r22
 2d2:	55 27       	eor	r21, r21
 2d4:	aa 27       	eor	r26, r26
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	aa 1f       	adc	r26, r26
 2dc:	a4 17       	cp	r26, r20
 2de:	10 f0       	brcs	.+4      	; 0x2e4 <__utoa_common+0x14>
 2e0:	a4 1b       	sub	r26, r20
 2e2:	83 95       	inc	r24
 2e4:	50 51       	subi	r21, 0x10	; 16
 2e6:	b9 f7       	brne	.-18     	; 0x2d6 <__utoa_common+0x6>
 2e8:	a0 5d       	subi	r26, 0xD0	; 208
 2ea:	aa 33       	cpi	r26, 0x3A	; 58
 2ec:	08 f0       	brcs	.+2      	; 0x2f0 <__utoa_common+0x20>
 2ee:	a9 5d       	subi	r26, 0xD9	; 217
 2f0:	a1 93       	st	Z+, r26
 2f2:	00 97       	sbiw	r24, 0x00	; 0
 2f4:	79 f7       	brne	.-34     	; 0x2d4 <__utoa_common+0x4>
 2f6:	b1 11       	cpse	r27, r1
 2f8:	b1 93       	st	Z+, r27
 2fa:	11 92       	st	Z+, r1
 2fc:	cb 01       	movw	r24, r22
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <strrev>

00000300 <strrev>:
 300:	dc 01       	movw	r26, r24
 302:	fc 01       	movw	r30, r24
 304:	67 2f       	mov	r22, r23
 306:	71 91       	ld	r23, Z+
 308:	77 23       	and	r23, r23
 30a:	e1 f7       	brne	.-8      	; 0x304 <strrev+0x4>
 30c:	32 97       	sbiw	r30, 0x02	; 2
 30e:	04 c0       	rjmp	.+8      	; 0x318 <strrev+0x18>
 310:	7c 91       	ld	r23, X
 312:	6d 93       	st	X+, r22
 314:	70 83       	st	Z, r23
 316:	62 91       	ld	r22, -Z
 318:	ae 17       	cp	r26, r30
 31a:	bf 07       	cpc	r27, r31
 31c:	c8 f3       	brcs	.-14     	; 0x310 <strrev+0x10>
 31e:	08 95       	ret

00000320 <_exit>:
 320:	f8 94       	cli

00000322 <__stop_program>:
 322:	ff cf       	rjmp	.-2      	; 0x322 <__stop_program>
