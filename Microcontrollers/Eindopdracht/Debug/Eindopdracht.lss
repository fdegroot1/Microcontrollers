
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000458  000004ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000458  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800114  00800114  00000500  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010f1  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b32  00000000  00000000  00001705  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000805  00000000  00000000  00002237  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00002a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e8  00000000  00000000  00002c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006fd  00000000  00000000  000031e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000038e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
   2:	00 00       	nop
   4:	12 c1       	rjmp	.+548    	; 0x22a <__vector_1>
   6:	00 00       	nop
   8:	66 c0       	rjmp	.+204    	; 0xd6 <__bad_interrupt>
   a:	00 00       	nop
   c:	64 c0       	rjmp	.+200    	; 0xd6 <__bad_interrupt>
   e:	00 00       	nop
  10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
  12:	00 00       	nop
  14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
  16:	00 00       	nop
  18:	5e c0       	rjmp	.+188    	; 0xd6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
  22:	00 00       	nop
  24:	58 c0       	rjmp	.+176    	; 0xd6 <__bad_interrupt>
  26:	00 00       	nop
  28:	56 c0       	rjmp	.+172    	; 0xd6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	54 c0       	rjmp	.+168    	; 0xd6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	52 c0       	rjmp	.+164    	; 0xd6 <__bad_interrupt>
  32:	00 00       	nop
  34:	50 c0       	rjmp	.+160    	; 0xd6 <__bad_interrupt>
  36:	00 00       	nop
  38:	4e c0       	rjmp	.+156    	; 0xd6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4c c0       	rjmp	.+152    	; 0xd6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
  42:	00 00       	nop
  44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
  46:	00 00       	nop
  48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	44 c0       	rjmp	.+136    	; 0xd6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
  52:	00 00       	nop
  54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
  56:	00 00       	nop
  58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
  62:	00 00       	nop
  64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
  66:	00 00       	nop
  68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
  72:	00 00       	nop
  74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
  76:	00 00       	nop
  78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
  82:	00 00       	nop
  84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
  86:	00 00       	nop
  88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	da 00       	.word	0x00da	; ????
  8e:	dd 00       	.word	0x00dd	; ????
  90:	e0 00       	.word	0x00e0	; ????
  92:	e3 00       	.word	0x00e3	; ????
  94:	e6 00       	.word	0x00e6	; ????
  96:	e9 00       	.word	0x00e9	; ????
  98:	ec 00       	.word	0x00ec	; ????
  9a:	ef 00       	.word	0x00ef	; ????

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d0 e1       	ldi	r29, 0x10	; 16
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	e8 e5       	ldi	r30, 0x58	; 88
  b0:	f4 e0       	ldi	r31, 0x04	; 4
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	0b bf       	out	0x3b, r16	; 59
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
  b8:	07 90       	elpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	a4 e1       	ldi	r26, 0x14	; 20
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	a6 31       	cpi	r26, 0x16	; 22
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	26 d1       	rcall	.+588    	; 0x320 <main>
  d4:	bf c1       	rjmp	.+894    	; 0x454 <_exit>

000000d6 <__bad_interrupt>:
  d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <lcd_strobe_lcd_e>:
outputs:
notes:			According datasheet HD44780
Version :    	DMK, Initial code
*******************************************************************/
void lcd_strobe_lcd_e(void) {
	PORTA |= (1<<LCD_E);	// E high
  d8:	8b b3       	in	r24, 0x1b	; 27
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	8f ec       	ldi	r24, 0xCF	; 207
  e0:	97 e0       	ldi	r25, 0x07	; 7
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_strobe_lcd_e+0xa>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_strobe_lcd_e+0x10>
  e8:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTA &= ~(1<<LCD_E);  	// E low
  ea:	8b b3       	in	r24, 0x1b	; 27
  ec:	8f 7b       	andi	r24, 0xBF	; 191
  ee:	8b bb       	out	0x1b, r24	; 27
  f0:	8f ec       	ldi	r24, 0xCF	; 207
  f2:	97 e0       	ldi	r25, 0x07	; 7
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <lcd_strobe_lcd_e+0x1c>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lcd_strobe_lcd_e+0x22>
  fa:	00 00       	nop
  fc:	08 95       	ret

000000fe <init_4bits_mode>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void init_4bits_mode(void) {
  fe:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	84 bb       	out	0x14, r24	; 20
	DDRA = 0xFF;
 104:	8a bb       	out	0x1a, r24	; 26
	PORTC = 0x00;
 106:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 108:	1b ba       	out	0x1b, r1	; 27
	//PORTA = 0xFF;

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
 10a:	c0 e2       	ldi	r28, 0x20	; 32
 10c:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 10e:	e4 df       	rcall	.-56     	; 0xd8 <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
	lcd_strobe_lcd_e();
 110:	c5 bb       	out	0x15, r28	; 21
 112:	e2 df       	rcall	.-60     	; 0xd8 <lcd_strobe_lcd_e>
	PORTC = 0x80;
 114:	80 e8       	ldi	r24, 0x80	; 128
	lcd_strobe_lcd_e();
 116:	85 bb       	out	0x15, r24	; 21

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 118:	df df       	rcall	.-66     	; 0xd8 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 11a:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;
 11c:	dd df       	rcall	.-70     	; 0xd8 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 11e:	80 ef       	ldi	r24, 0xF0	; 240

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 120:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 122:	da df       	rcall	.-76     	; 0xd8 <lcd_strobe_lcd_e>
 124:	15 ba       	out	0x15, r1	; 21
	PORTC = 0x60;
 126:	d8 df       	rcall	.-80     	; 0xd8 <lcd_strobe_lcd_e>
 128:	80 e6       	ldi	r24, 0x60	; 96
	lcd_strobe_lcd_e();
 12a:	85 bb       	out	0x15, r24	; 21
 12c:	d5 df       	rcall	.-86     	; 0xd8 <lcd_strobe_lcd_e>
}
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <lcd_write_data>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_data(unsigned char byte) {
 132:	cf 93       	push	r28
 134:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 136:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1<<LCD_RS);
 138:	8b b3       	in	r24, 0x1b	; 27
 13a:	80 61       	ori	r24, 0x10	; 16
 13c:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 13e:	cc df       	rcall	.-104    	; 0xd8 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 140:	c2 95       	swap	r28
 142:	c0 7f       	andi	r28, 0xF0	; 240
 144:	c5 bb       	out	0x15, r28	; 21
	PORTA |= (1<<LCD_RS);
 146:	8b b3       	in	r24, 0x1b	; 27
 148:	80 61       	ori	r24, 0x10	; 16
	lcd_strobe_lcd_e();
 14a:	8b bb       	out	0x1b, r24	; 27
 14c:	c5 df       	rcall	.-118    	; 0xd8 <lcd_strobe_lcd_e>
}
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <lcd_write_string>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_string(char *str) {
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	ec 01       	movw	r28, r24
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 158:	02 c0       	rjmp	.+4      	; 0x15e <lcd_write_string+0xc>
		lcd_write_data(*str);
 15a:	eb df       	rcall	.-42     	; 0x132 <lcd_write_data>
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 15c:	21 96       	adiw	r28, 0x01	; 1
 15e:	88 81       	ld	r24, Y
 160:	81 11       	cpse	r24, r1
 162:	fb cf       	rjmp	.-10     	; 0x15a <lcd_write_string+0x8>
		lcd_write_data(*str);
	}
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <lcd_write_command>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_command(unsigned char byte) {
 16a:	cf 93       	push	r28
 16c:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 16e:	85 bb       	out	0x15, r24	; 21
	PORTA &= ~(1<<LCD_RS);
 170:	8b b3       	in	r24, 0x1b	; 27
 172:	8f 7e       	andi	r24, 0xEF	; 239
 174:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 176:	b0 df       	rcall	.-160    	; 0xd8 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 178:	c2 95       	swap	r28
 17a:	c0 7f       	andi	r28, 0xF0	; 240
 17c:	c5 bb       	out	0x15, r28	; 21
	PORTA &= ~(1<<LCD_RS);
 17e:	8b b3       	in	r24, 0x1b	; 27
 180:	8f 7e       	andi	r24, 0xEF	; 239
	lcd_strobe_lcd_e();
 182:	8b bb       	out	0x1b, r24	; 27
 184:	a9 df       	rcall	.-174    	; 0xd8 <lcd_strobe_lcd_e>
}
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <lcd_clear>:


void lcd_clear() {
	lcd_write_command (0x01);						//Leeg display
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	ee df       	rcall	.-36     	; 0x16a <lcd_write_command>
 18e:	8f e9       	ldi	r24, 0x9F	; 159
 190:	9f e0       	ldi	r25, 0x0F	; 15
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_clear+0x8>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_clear+0xe>
 198:	00 00       	nop
	_delay_ms(2);
	lcd_write_command (0x80);						//Cursor terug naar start
 19a:	80 e8       	ldi	r24, 0x80	; 128
 19c:	e6 cf       	rjmp	.-52     	; 0x16a <lcd_write_command>
 19e:	08 95       	ret

000001a0 <OneStep>:
void write_int_lcd(int number){
	int length = snprintf(NULL, 0, "%d", number);
	char str[length + 1];
	snprintf(str, length + 1, "%d", number);
	lcd_write_string(str);
}
 1a0:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__data_end>
 1a4:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <__data_end+0x1>
 1a8:	e8 30       	cpi	r30, 0x08	; 8
 1aa:	f1 05       	cpc	r31, r1
 1ac:	d8 f4       	brcc	.+54     	; 0x1e4 <OneStep+0x44>
 1ae:	ea 5b       	subi	r30, 0xBA	; 186
 1b0:	ff 4f       	sbci	r31, 0xFF	; 255
 1b2:	0a c1       	rjmp	.+532    	; 0x3c8 <__tablejump2__>
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	83 b9       	out	0x03, r24	; 3
 1b8:	16 c0       	rjmp	.+44     	; 0x1e6 <OneStep+0x46>
 1ba:	83 e0       	ldi	r24, 0x03	; 3
 1bc:	83 b9       	out	0x03, r24	; 3
 1be:	13 c0       	rjmp	.+38     	; 0x1e6 <OneStep+0x46>
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	83 b9       	out	0x03, r24	; 3
 1c4:	10 c0       	rjmp	.+32     	; 0x1e6 <OneStep+0x46>
 1c6:	86 e0       	ldi	r24, 0x06	; 6
 1c8:	83 b9       	out	0x03, r24	; 3
 1ca:	0d c0       	rjmp	.+26     	; 0x1e6 <OneStep+0x46>
 1cc:	84 e0       	ldi	r24, 0x04	; 4
 1ce:	83 b9       	out	0x03, r24	; 3
 1d0:	0a c0       	rjmp	.+20     	; 0x1e6 <OneStep+0x46>
 1d2:	8c e0       	ldi	r24, 0x0C	; 12
 1d4:	83 b9       	out	0x03, r24	; 3
 1d6:	07 c0       	rjmp	.+14     	; 0x1e6 <OneStep+0x46>
 1d8:	88 e0       	ldi	r24, 0x08	; 8
 1da:	83 b9       	out	0x03, r24	; 3
 1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <OneStep+0x46>
 1de:	89 e0       	ldi	r24, 0x09	; 9
 1e0:	83 b9       	out	0x03, r24	; 3
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <OneStep+0x46>
 1e4:	13 b8       	out	0x03, r1	; 3
 1e6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 1ea:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 1f4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 1f8:	08 97       	sbiw	r24, 0x08	; 8
 1fa:	24 f0       	brlt	.+8      	; 0x204 <OneStep+0x64>
 1fc:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
 200:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
 204:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 208:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 20c:	99 23       	and	r25, r25
 20e:	34 f4       	brge	.+12     	; 0x21c <OneStep+0x7c>
 210:	87 e0       	ldi	r24, 0x07	; 7
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 218:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 21c:	8f ec       	ldi	r24, 0xCF	; 207
 21e:	97 e0       	ldi	r25, 0x07	; 7
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <OneStep+0x80>
 224:	00 c0       	rjmp	.+0      	; 0x226 <OneStep+0x86>
 226:	00 00       	nop
 228:	08 95       	ret

0000022a <__vector_1>:
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	8f 93       	push	r24
 236:	9f 93       	push	r25
 238:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <int_stat>
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	41 f4       	brne	.+16     	; 0x250 <__vector_1+0x26>
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
 246:	1d bc       	out	0x2d, r1	; 45
 248:	1c bc       	out	0x2c, r1	; 44
 24a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <int_stat>
 24e:	0c c0       	rjmp	.+24     	; 0x268 <__vector_1+0x3e>
 250:	83 e0       	ldi	r24, 0x03	; 3
 252:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
 256:	8c b5       	in	r24, 0x2c	; 44
 258:	9d b5       	in	r25, 0x2d	; 45
 25a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 25e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <int_stat>
 268:	9f 91       	pop	r25
 26a:	8f 91       	pop	r24
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <wait_us>:
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	06 c0       	rjmp	.+12     	; 0x288 <wait_us+0x12>
 27c:	42 e0       	ldi	r20, 0x02	; 2
 27e:	4a 95       	dec	r20
 280:	f1 f7       	brne	.-4      	; 0x27e <wait_us+0x8>
 282:	00 c0       	rjmp	.+0      	; 0x284 <wait_us+0xe>
 284:	2f 5f       	subi	r18, 0xFF	; 255
 286:	3f 4f       	sbci	r19, 0xFF	; 255
 288:	28 17       	cp	r18, r24
 28a:	39 07       	cpc	r19, r25
 28c:	b8 f3       	brcs	.-18     	; 0x27c <wait_us+0x6>
 28e:	08 95       	ret

00000290 <wait_ms>:
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	08 c0       	rjmp	.+16     	; 0x2a6 <wait_ms+0x16>
 296:	ef ec       	ldi	r30, 0xCF	; 207
 298:	f7 e0       	ldi	r31, 0x07	; 7
 29a:	31 97       	sbiw	r30, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <wait_ms+0xa>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <wait_ms+0x10>
 2a0:	00 00       	nop
 2a2:	2f 5f       	subi	r18, 0xFF	; 255
 2a4:	3f 4f       	sbci	r19, 0xFF	; 255
 2a6:	28 17       	cp	r18, r24
 2a8:	39 07       	cpc	r19, r25
 2aa:	a8 f3       	brcs	.-22     	; 0x296 <wait_ms+0x6>
 2ac:	08 95       	ret

000002ae <ultrasonic_send_pulse>:
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	c5 e6       	ldi	r28, 0x65	; 101
 2b4:	d0 e0       	ldi	r29, 0x00	; 0
 2b6:	18 82       	st	Y, r1
 2b8:	8a e0       	ldi	r24, 0x0A	; 10
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	dc df       	rcall	.-72     	; 0x276 <wait_us>
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	88 83       	st	Y, r24
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <ultrasonic_measurement>:
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	00 d0       	rcall	.+0      	; 0x2d2 <ultrasonic_measurement+0xa>
 2d2:	00 d0       	rcall	.+0      	; 0x2d4 <ultrasonic_measurement+0xc>
 2d4:	1f 92       	push	r1
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
 2da:	e9 df       	rcall	.-46     	; 0x2ae <ultrasonic_send_pulse>
 2dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2e4:	2a ea       	ldi	r18, 0xAA	; 170
 2e6:	28 9f       	mul	r18, r24
 2e8:	80 01       	movw	r16, r0
 2ea:	29 9f       	mul	r18, r25
 2ec:	10 0d       	add	r17, r0
 2ee:	11 24       	eor	r1, r1
 2f0:	4c df       	rcall	.-360    	; 0x18a <lcd_clear>
 2f2:	4a e0       	ldi	r20, 0x0A	; 10
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	be 01       	movw	r22, r28
 2f8:	6f 5f       	subi	r22, 0xFF	; 255
 2fa:	7f 4f       	sbci	r23, 0xFF	; 255
 2fc:	c8 01       	movw	r24, r16
 2fe:	6d d0       	rcall	.+218    	; 0x3da <itoa>
 300:	ce 01       	movw	r24, r28
 302:	01 96       	adiw	r24, 0x01	; 1
 304:	26 df       	rcall	.-436    	; 0x152 <lcd_write_string>
 306:	88 ec       	ldi	r24, 0xC8	; 200
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	c2 df       	rcall	.-124    	; 0x290 <wait_ms>
 30c:	0f 90       	pop	r0
 30e:	0f 90       	pop	r0
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	0f 90       	pop	r0
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	1f 91       	pop	r17
 31c:	0f 91       	pop	r16
 31e:	08 95       	ret

00000320 <main>:

int main(void)
{
	DDRG = 0xFF; // port g all output. pin 0 is trig, the rest is for debug
 320:	8f ef       	ldi	r24, 0xFF	; 255
 322:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	DDRD = 0x00; // port D pin 0 on input. 0 is echo and also interrupt
 326:	11 ba       	out	0x11, r1	; 17
	
	EICRA = 0x03; // interrupt PORTD on pin 0, rising edge
 328:	83 e0       	ldi	r24, 0x03	; 3
 32a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	
	EIMSK |= 0x01; // enable interrupt on pin 0 (INT0)
 32e:	89 b7       	in	r24, 0x39	; 57
 330:	81 60       	ori	r24, 0x01	; 1
 332:	89 bf       	out	0x39, r24	; 57
	
	TCCR1A = 0b00000000; // initialize timer1, prescaler=256
 334:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00001100; // CTC compare A, RUN
 336:	8c e0       	ldi	r24, 0x0C	; 12
 338:	8e bd       	out	0x2e, r24	; 46
	
	sei(); // turn on interrupt system
 33a:	78 94       	sei
	
	init_4bits_mode();
 33c:	e0 de       	rcall	.-576    	; 0xfe <init_4bits_mode>
 33e:	8f e1       	ldi	r24, 0x1F	; 31
 340:	9e e4       	ldi	r25, 0x4E	; 78
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <main+0x22>
 346:	00 c0       	rjmp	.+0      	; 0x348 <main+0x28>
	_delay_ms(10);
	lcd_clear();
 348:	00 00       	nop
 34a:	1f df       	rcall	.-450    	; 0x18a <lcd_clear>

	for(int i = 0; i < 4096; i++){
 34c:	c0 e0       	ldi	r28, 0x00	; 0
 34e:	d0 e0       	ldi	r29, 0x00	; 0
		OneStep();
 350:	08 c0       	rjmp	.+16     	; 0x362 <main+0x42>
 352:	26 df       	rcall	.-436    	; 0x1a0 <OneStep>
 354:	8f ec       	ldi	r24, 0xCF	; 207
 356:	97 e0       	ldi	r25, 0x07	; 7
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <main+0x38>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <main+0x3e>
 35e:	00 00       	nop
	
	init_4bits_mode();
	_delay_ms(10);
	lcd_clear();

	for(int i = 0; i < 4096; i++){
 360:	21 96       	adiw	r28, 0x01	; 1
 362:	c1 15       	cp	r28, r1
 364:	90 e1       	ldi	r25, 0x10	; 16
 366:	d9 07       	cpc	r29, r25
 368:	a4 f3       	brlt	.-24     	; 0x352 <main+0x32>
 36a:	c0 e0       	ldi	r28, 0x00	; 0
 36c:	d0 e0       	ldi	r29, 0x00	; 0
	}

	int isSonarActive = 0;
    while (1) 
    {
		if(PINF & BIT(SONAR)){
 36e:	00 9b       	sbis	0x00, 0	; 0
 370:	07 c0       	rjmp	.+14     	; 0x380 <main+0x60>
			if(isSonarActive){
 372:	cd 2b       	or	r28, r29
 374:	19 f0       	breq	.+6      	; 0x37c <main+0x5c>
				//TODO deactivate sonar
				isSonarActive = 0;
 376:	c0 e0       	ldi	r28, 0x00	; 0
 378:	d0 e0       	ldi	r29, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <main+0x60>
			}
			else{
				//TODO activate sonar
				isSonarActive = 1;
 37c:	c1 e0       	ldi	r28, 0x01	; 1
			}
		}
		
		if(PINF & BIT(LEFT)){
 37e:	d0 e0       	ldi	r29, 0x00	; 0
 380:	02 9b       	sbis	0x00, 2	; 0
			//TODO rotate to left
			OneStep();
 382:	07 c0       	rjmp	.+14     	; 0x392 <main+0x72>
 384:	0d df       	rcall	.-486    	; 0x1a0 <OneStep>
 386:	8f ec       	ldi	r24, 0xCF	; 207
 388:	97 e0       	ldi	r25, 0x07	; 7
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <main+0x6a>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <main+0x70>
			_delay_ms(1);
		}
		
		if(PINF & BIT(RIGHT)){
 390:	00 00       	nop
 392:	01 9b       	sbis	0x00, 1	; 0
			//TODO rotate to right
			OneStep();
 394:	07 c0       	rjmp	.+14     	; 0x3a4 <main+0x84>
 396:	04 df       	rcall	.-504    	; 0x1a0 <OneStep>
 398:	8f ec       	ldi	r24, 0xCF	; 207
 39a:	97 e0       	ldi	r25, 0x07	; 7
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <main+0x7c>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <main+0x82>
			_delay_ms(1);
		}
		
		if(isSonarActive){
 3a2:	00 00       	nop
 3a4:	20 97       	sbiw	r28, 0x00	; 0
			ultrasonic_measurement();
 3a6:	11 f0       	breq	.+4      	; 0x3ac <main+0x8c>
 3a8:	8f df       	rcall	.-226    	; 0x2c8 <ultrasonic_measurement>
		}
		else{
			lcd_clear();
 3aa:	04 c0       	rjmp	.+8      	; 0x3b4 <main+0x94>
 3ac:	ee de       	rcall	.-548    	; 0x18a <lcd_clear>
			lcd_write_string("Sonar is off");
 3ae:	86 e0       	ldi	r24, 0x06	; 6
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	cf de       	rcall	.-610    	; 0x152 <lcd_write_string>
 3b4:	9f ef       	ldi	r25, 0xFF	; 255
 3b6:	20 e7       	ldi	r18, 0x70	; 112
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	91 50       	subi	r25, 0x01	; 1
 3bc:	20 40       	sbci	r18, 0x00	; 0
 3be:	80 40       	sbci	r24, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <main+0x9a>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <main+0xa4>
 3c4:	00 00       	nop
 3c6:	d3 cf       	rjmp	.-90     	; 0x36e <main+0x4e>

000003c8 <__tablejump2__>:
 3c8:	ee 0f       	add	r30, r30
 3ca:	ff 1f       	adc	r31, r31
 3cc:	00 24       	eor	r0, r0
 3ce:	00 1c       	adc	r0, r0
 3d0:	0b be       	out	0x3b, r0	; 59
 3d2:	07 90       	elpm	r0, Z+
 3d4:	f6 91       	elpm	r31, Z
 3d6:	e0 2d       	mov	r30, r0
 3d8:	09 94       	ijmp

000003da <itoa>:
 3da:	45 32       	cpi	r20, 0x25	; 37
 3dc:	51 05       	cpc	r21, r1
 3de:	18 f4       	brcc	.+6      	; 0x3e6 <itoa+0xc>
 3e0:	42 30       	cpi	r20, 0x02	; 2
 3e2:	08 f0       	brcs	.+2      	; 0x3e6 <itoa+0xc>
 3e4:	04 c0       	rjmp	.+8      	; 0x3ee <__itoa_ncheck>
 3e6:	fb 01       	movw	r30, r22
 3e8:	10 82       	st	Z, r1
 3ea:	cb 01       	movw	r24, r22
 3ec:	08 95       	ret

000003ee <__itoa_ncheck>:
 3ee:	bb 27       	eor	r27, r27
 3f0:	4a 30       	cpi	r20, 0x0A	; 10
 3f2:	31 f4       	brne	.+12     	; 0x400 <__LOCK_REGION_LENGTH__>
 3f4:	99 23       	and	r25, r25
 3f6:	22 f4       	brpl	.+8      	; 0x400 <__LOCK_REGION_LENGTH__>
 3f8:	bd e2       	ldi	r27, 0x2D	; 45
 3fa:	90 95       	com	r25
 3fc:	81 95       	neg	r24
 3fe:	9f 4f       	sbci	r25, 0xFF	; 255
 400:	01 c0       	rjmp	.+2      	; 0x404 <__utoa_common>

00000402 <__utoa_ncheck>:
 402:	bb 27       	eor	r27, r27

00000404 <__utoa_common>:
 404:	fb 01       	movw	r30, r22
 406:	55 27       	eor	r21, r21
 408:	aa 27       	eor	r26, r26
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	aa 1f       	adc	r26, r26
 410:	a4 17       	cp	r26, r20
 412:	10 f0       	brcs	.+4      	; 0x418 <__utoa_common+0x14>
 414:	a4 1b       	sub	r26, r20
 416:	83 95       	inc	r24
 418:	50 51       	subi	r21, 0x10	; 16
 41a:	b9 f7       	brne	.-18     	; 0x40a <__utoa_common+0x6>
 41c:	a0 5d       	subi	r26, 0xD0	; 208
 41e:	aa 33       	cpi	r26, 0x3A	; 58
 420:	08 f0       	brcs	.+2      	; 0x424 <__utoa_common+0x20>
 422:	a9 5d       	subi	r26, 0xD9	; 217
 424:	a1 93       	st	Z+, r26
 426:	00 97       	sbiw	r24, 0x00	; 0
 428:	79 f7       	brne	.-34     	; 0x408 <__utoa_common+0x4>
 42a:	b1 11       	cpse	r27, r1
 42c:	b1 93       	st	Z+, r27
 42e:	11 92       	st	Z+, r1
 430:	cb 01       	movw	r24, r22
 432:	00 c0       	rjmp	.+0      	; 0x434 <strrev>

00000434 <strrev>:
 434:	dc 01       	movw	r26, r24
 436:	fc 01       	movw	r30, r24
 438:	67 2f       	mov	r22, r23
 43a:	71 91       	ld	r23, Z+
 43c:	77 23       	and	r23, r23
 43e:	e1 f7       	brne	.-8      	; 0x438 <strrev+0x4>
 440:	32 97       	sbiw	r30, 0x02	; 2
 442:	04 c0       	rjmp	.+8      	; 0x44c <strrev+0x18>
 444:	7c 91       	ld	r23, X
 446:	6d 93       	st	X+, r22
 448:	70 83       	st	Z, r23
 44a:	62 91       	ld	r22, -Z
 44c:	ae 17       	cp	r26, r30
 44e:	bf 07       	cpc	r27, r31
 450:	c8 f3       	brcs	.-14     	; 0x444 <strrev+0x10>
 452:	08 95       	ret

00000454 <_exit>:
 454:	f8 94       	cli

00000456 <__stop_program>:
 456:	ff cf       	rjmp	.-2      	; 0x456 <__stop_program>
